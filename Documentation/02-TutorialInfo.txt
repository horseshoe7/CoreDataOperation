1.5.  Style and Architecture
----------------------------

This isn't so much a section as it is a tangent, but I thought it of interest to talk about structure.  Most tutorials you see out there are limited to the simple technology they are demonstrating, and very little is ever discussed as to design patterns for an actual app.

It's ultimately up to you how you want to organize your app, but I thought it here a decent idea to share with you some of the approaches I take, as I have built a good number of apps, and they have been reported to be rather stable.  :D

Just remember, as I must:  There is ALWAYS a bigger fish.  I have been doing this for 4-5 years, so I know there is a bigger fish.  For some reason he doesn't ever find me and I'm getting sad about that.  I wonder if I'm living in a vacuum.

What I notice in my apps is that there are always aspects of the app that never seem to "belong" to a View Controller.  There are app-wide methods and functionality you need that aren't bound to any one instance of anything, except the application itself.  Now, Apple already provides the Application Delegate, but I don't know about you, I don't like using Macros in code, because they work "for you", but anyone else using your code has to understand what your macros do.

I also don't like writing

```AppDelegate *appdelegate = (AppDelegate*)[[UIApplication sharedApplication] delegate];```

and I also don't like having a 'fat app delegate'.  I see it as an entry point to an app, and that's it.  No, I tend to keep a singleton instance to my application that owns certain tasks/objects that aren't view controller specific, such as:

    - an event logger
    - an operation queue for background tasks
    - a networking client
    - notification handler
    - convenience methods, such as displaying alerts for errors

It's hard to say what this should have because of course Applications are specific to the erm... application you need to build.

That said, I thought I'd digress briefly so to mention an appropriate place to keep an instance to an NSOperationQueue, since this is our next topic.

## Create CDOApplication singleton, then remove it from project.  Commit as section_01.5.  Then add to project.  Commit. as section_01.5.1 ##




2.0  NSOperation
----------------

Intro

2.0  Core Data Stacks and background queues
    PSC -> BG MOC (saving) -> MT MOC (using)

    - children of BG or of MT??  Your choice.  I tend to use BG, since MT gets notified of persistent saves.
        - this could be undesirable / bad performance as I'm saving too often to disk.  I haven't had performance bottlenecks
        - ultimately you decide.

2.1  Simple Synchronous background task
    - must use saveWithOptions: and have synchronously, or else the start method finishes and thus the operation.  =BAD.

2.1.1  Test our Code and UI Considerations
    - Ensure the completion is being called on MT.

2.1.2  UI Considerations
    a - Adding UI

2.1.3  NSFetchedResultsController
    - decouple the UI

2.2  Simple Asynchronous background task
- increase flexibility
- in this case, allows the asynchronous MR tasks, but think networking/sockets as to why you'd need something like this.

2.2.1  Re-implement 2.1 with this baseclass


2.3  Core Data Background Task with Simulated Network service

- Once you've decided how you want to do context saving, you should keep a reference to a local context.

- be careful!  Think in thread space.  What if you have concurrent operations that both use a local context?  you may be creating objects that don't know about each other, meant to be the same object.

- consider dependencies.  (later)


2.4  Architectural Considerations (UI and errors)

On Design Patterns:  Not my intention to get into these because a lot of people think there's one way to solve a problem -> their way.  And they are right.  That being said, no matter what your architecture or design pattern, it is important to BE CONSISTENT.  Users of your code will expect a certain style, so that even if they don't know your code, they can begin to expect how it probably works.

- In 2.1.3, with NSFetchedResultsController, we've seen decoupling.  You do a data operation and let the changes be dealt with by a NSFetchedResultsController so that the UI is kept up-to-date.  This makes sense.

What often happens in Mobile App Development is that you're doing a lot of things asynchronously.  Think server-client architecture.  Request an image, wait to download it, display it.

Remember this:  if a task is asynchronous, plan for success and failure.  Design with both cases in mind.  How are you going to handle errors?

Examine the rename operation.  Examine the model.   See how I have specified username is not allowed to be nil?  (Also, I create new ones with a default name.)  Now look at my rename action in ViewController.  Here I actually do simple data validation.  I am only allowed to set the username if it is non-nil and that length is greater than 1.

Now what happens if I DO allow it?

2.4.1  Remove data validation in View Controller and show how there is no feedback regarding validation errors and nothing happens.

    - so I am not told if something goes wrong.  Add error stuff.  Nothing happens in UI, yet look at log when you use empty string.

2.4.2  add error to NSOperation subclass.

    But how do I USE that??

    - check in completion block if there is an error.
        -- works, but a kind of strange way to do it.  Plus you get these retain cycle warnings, and keeping a weak ref may result in him being nil later because he'll be out of the Queue and no longer retained.


2.5  Pimp my Operation!  Completion Blocks for asynchronous tasks

- provides more info about what happened with the operation

2.6  Dependencies and Chaining

- operations whose flow depends on what happened before it.
    - self.dependencies is not enough, because you don't know which NSOperation is the predecessor.

2.7  Customizing NSOperationQueue

- filtering incoming commands by subclassing addOperation: and addOperations:waitUntilFinished:
